[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lbscratch"
dynamic = ["version"]
description = "Collection of useful utilities for radio astronomy data processing"
readme = "README.md"
license = "MIT"
requires-python = ">=3.10"
authors = [
    { name = "Landman Bester", email = "lbester@sarao.ac.za" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Physics",
]
keywords = ["radio astronomy", "interferometry", "calibration", "imaging"]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "numba>=0.57.0",
    "dask[array]>=2023.1.0",
    "matplotlib>=3.6.0",
    "click>=8.1",
    "stimela>=2.0.2",
    "pyscilog",
    "finufft",
    "ducc0",
    "sympy>=1.11.0",
    "pfb-imaging @ git+https://github.com/ratt-ru/pfb-imaging.git@rephase",
    "smoove @ git+https://github.com/landmanbester/smoove.git@test_ci",
]

[project.optional-dependencies]
# Scientific computing extras for future JAX integration
jax = [
    "jax[cpu]>=0.4.0",
    "jaxlib>=0.4.0",
    "optax>=0.1.7",
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "coverage[toml]>=7.0.0",
    "tbump>=6.9.0",
]

# Documentation
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "myst-parser>=1.0.0",
    "nbsphinx>=0.9.0",
]

# Full installation with all extras
all = [
    "lbscratch[jax,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/landmanbester/lbscratch"
Repository = "https://github.com/landmanbester/lbscratch"
Issues = "https://github.com/landmanbester/lbscratch/issues"

[project.scripts]
lbs = "lbscratch.workers.main:cli"

[tool.hatch.version]
path = "lbscratch/__init__.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["lbscratch"]

[tool.hatch.build.targets.sdist]
include = [
    "/lbscratch",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["lbscratch"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# Type checking with mypy
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_no_return = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true
disable_error_code = ["union-attr", "no-untyped-def", "assignment", "var-annotated"]

[[tool.mypy.overrides]]
module = [
    "finufft.*",
    "ducc0.*",
    "smoove.*",
    "pfb.*",
    "pyscilog.*",
    "scabha.*",
]
ignore_missing_imports = true

[tool.ruff]
# Same as black's default line length
line-length = 99

# Target Python 3.10+ to match project requirements
target-version = "py310"

# Enable specific rule categories
lint.select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "NPY",    # numpy-specific rules
    "RUF",    # ruff-specific rules
]

# Ignore specific rules that conflict with scientific computing
lint.ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults (common in scientific APIs)
    "PD901",  # Avoid `df` as variable name (too restrictive for data science)
    "E402",   # ignore module level import not at top of file
]

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Auto-detect line ending
line-ending = "auto"

[tool.ruff.lint.isort]
# Group imports: standard library, third-party, first-party
known-first-party = ["lbscratch"]
known-third-party = [
    "numpy", "scipy", "numba", "dask", "matplotlib",
    "click", "omegaconf", "pyscilog", "scabha",
    "finufft", "ducc0", "sympy", "jax", "optax"
]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
# Allow unused imports in __init__.py files
"__init__.py" = ["F401"]
# Allow print statements in scripts
"scripts/*" = ["T201"]
# Relax rules for test files
"tests/*" = ["S101", "D103"]  # Allow assert statements and missing docstrings
